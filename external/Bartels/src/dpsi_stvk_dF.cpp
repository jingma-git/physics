#ifdef SIM_STATIC_LIBRARY
# include<../include/dpsi_stvk_dF.h>
#endif

template<typename GradientType, typename DefoType, typename ParameterType>
void sim::dpsi_stvk_dF(Eigen::MatrixBase<GradientType> &dw, const Eigen::MatrixBase<DefoType> &F, const Eigen::MatrixBase<ParameterType> &params) {

    using Scalar = typename GradientType::Scalar;

    Scalar lambda = params(0);
    Scalar mu = params(1); 

    Scalar F1_1, F1_2, F1_3, F2_1, F2_2, F2_3, F3_1, F3_2, F3_3;

    F1_1 = F(0,0);
    F1_2 = F(0,1);
    F1_3 = F(0,2);
    F2_1 = F(1,0);
    F2_2 = F(1,1);
    F2_3 = F(1,2);
    F3_1 = F(2,0);
    F3_2 = F(2,1);
    F3_3 = F(2,2);

    dw(0) = mu*(F1_1*((F1_1*F1_1)/2.0+(F2_1*F2_1)/2.0+(F3_1*F3_1)/2.0-1.0/2.0)*2.0+F1_2*((F1_1*F1_2)/2.0+(F2_1*F2_2)/2.0+(F3_1*F3_2)/2.0)*2.0+F1_3*((F1_1*F1_3)/2.0+(F2_1*F2_3)/2.0+(F3_1*F3_3)/2.0)*2.0)+F1_1*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(1) = mu*(F2_1*((F1_1*F1_1)/2.0+(F2_1*F2_1)/2.0+(F3_1*F3_1)/2.0-1.0/2.0)*2.0+F2_2*((F1_1*F1_2)/2.0+(F2_1*F2_2)/2.0+(F3_1*F3_2)/2.0)*2.0+F2_3*((F1_1*F1_3)/2.0+(F2_1*F2_3)/2.0+(F3_1*F3_3)/2.0)*2.0)+F2_1*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(2) = mu*(F3_1*((F1_1*F1_1)/2.0+(F2_1*F2_1)/2.0+(F3_1*F3_1)/2.0-1.0/2.0)*2.0+F3_2*((F1_1*F1_2)/2.0+(F2_1*F2_2)/2.0+(F3_1*F3_2)/2.0)*2.0+F3_3*((F1_1*F1_3)/2.0+(F2_1*F2_3)/2.0+(F3_1*F3_3)/2.0)*2.0)+F3_1*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(3) = mu*(F1_2*((F1_2*F1_2)/2.0+(F2_2*F2_2)/2.0+(F3_2*F3_2)/2.0-1.0/2.0)*2.0+F1_1*((F1_1*F1_2)/2.0+(F2_1*F2_2)/2.0+(F3_1*F3_2)/2.0)*2.0+F1_3*((F1_2*F1_3)/2.0+(F2_2*F2_3)/2.0+(F3_2*F3_3)/2.0)*2.0)+F1_2*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(4) = mu*(F2_2*((F1_2*F1_2)/2.0+(F2_2*F2_2)/2.0+(F3_2*F3_2)/2.0-1.0/2.0)*2.0+F2_1*((F1_1*F1_2)/2.0+(F2_1*F2_2)/2.0+(F3_1*F3_2)/2.0)*2.0+F2_3*((F1_2*F1_3)/2.0+(F2_2*F2_3)/2.0+(F3_2*F3_3)/2.0)*2.0)+F2_2*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(5) = mu*(F3_2*((F1_2*F1_2)/2.0+(F2_2*F2_2)/2.0+(F3_2*F3_2)/2.0-1.0/2.0)*2.0+F3_1*((F1_1*F1_2)/2.0+(F2_1*F2_2)/2.0+(F3_1*F3_2)/2.0)*2.0+F3_3*((F1_2*F1_3)/2.0+(F2_2*F2_3)/2.0+(F3_2*F3_3)/2.0)*2.0)+F3_2*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(6) = mu*(F1_3*((F1_3*F1_3)/2.0+(F2_3*F2_3)/2.0+(F3_3*F3_3)/2.0-1.0/2.0)*2.0+F1_1*((F1_1*F1_3)/2.0+(F2_1*F2_3)/2.0+(F3_1*F3_3)/2.0)*2.0+F1_2*((F1_2*F1_3)/2.0+(F2_2*F2_3)/2.0+(F3_2*F3_3)/2.0)*2.0)+F1_3*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(7) = mu*(F2_3*((F1_3*F1_3)/2.0+(F2_3*F2_3)/2.0+(F3_3*F3_3)/2.0-1.0/2.0)*2.0+F2_1*((F1_1*F1_3)/2.0+(F2_1*F2_3)/2.0+(F3_1*F3_3)/2.0)*2.0+F2_2*((F1_2*F1_3)/2.0+(F2_2*F2_3)/2.0+(F3_2*F3_3)/2.0)*2.0)+F2_3*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);
    dw(8) = mu*(F3_3*((F1_3*F1_3)/2.0+(F2_3*F2_3)/2.0+(F3_3*F3_3)/2.0-1.0/2.0)*2.0+F3_1*((F1_1*F1_3)/2.0+(F2_1*F2_3)/2.0+(F3_1*F3_3)/2.0)*2.0+F3_2*((F1_2*F1_3)/2.0+(F2_2*F2_3)/2.0+(F3_2*F3_3)/2.0)*2.0)+F3_3*lambda*((F1_1*F1_1)/2.0+(F1_2*F1_2)/2.0+(F1_3*F1_3)/2.0+(F2_1*F2_1)/2.0+(F2_2*F2_2)/2.0+(F2_3*F2_3)/2.0+(F3_1*F3_1)/2.0+(F3_2*F3_2)/2.0+(F3_3*F3_3)/2.0-3.0/2.0);

}